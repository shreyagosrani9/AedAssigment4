/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.ComparePanel;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import models.Encounter;
import models.EncounterHistory;
import models.Patient;
import models.PatientDirectory;
import models.Person;
import models.PersonDirectory;

/**
 *
 * @author shreya
 */
public class MainComparePanel extends javax.swing.JPanel {

    /**
     * Creates new form MainComparePanel
     */
    private JPanel WorkAreaPanel;
    private PersonDirectory personDirectory;
    private PatientDirectory patientDirectory;

    public MainComparePanel(JPanel WorkAreaPanel, PersonDirectory personDirectory, PatientDirectory patientDirectory) {
        initComponents();
        this.WorkAreaPanel = WorkAreaPanel;
        this.personDirectory = personDirectory;
        this.patientDirectory = patientDirectory;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblHeading = new javax.swing.JLabel();
        lblSearch = new javax.swing.JLabel();
        comboCommunity = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        compareTable = new javax.swing.JTable();
        btnAbnormalBP = new javax.swing.JButton();
        txtCount = new javax.swing.JTextField();
        lblCount = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 204, 204));
        setForeground(new java.awt.Color(51, 51, 51));

        lblHeading.setBackground(new java.awt.Color(255, 255, 255));
        lblHeading.setFont(new java.awt.Font("SansSerif", 1, 36)); // NOI18N
        lblHeading.setForeground(new java.awt.Color(51, 51, 51));
        lblHeading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHeading.setText("COMPARE VITAL SIGNS");

        lblSearch.setForeground(new java.awt.Color(51, 51, 51));
        lblSearch.setText("Select Community:");

        comboCommunity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Roxbury", "Mission Hill", "Longwood" }));

        compareTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Unique ID", "Name", "Address", "Age", "Community"
            }
        ));
        jScrollPane1.setViewportView(compareTable);

        btnAbnormalBP.setText("Abnormal Blood Pressure");
        btnAbnormalBP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbnormalBPActionPerformed(evt);
            }
        });

        txtCount.setEnabled(false);

        lblCount.setForeground(new java.awt.Color(51, 51, 51));
        lblCount.setText("Total Abnomal Count:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblHeading, javax.swing.GroupLayout.DEFAULT_SIZE, 988, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(325, 325, 325)
                        .addComponent(lblSearch)
                        .addGap(37, 37, 37)
                        .addComponent(comboCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblCount)
                        .addGap(18, 18, 18)
                        .addComponent(txtCount, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(392, 392, 392)
                .addComponent(btnAbnormalBP)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(lblHeading)
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearch)
                    .addComponent(comboCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(81, 81, 81)
                .addComponent(btnAbnormalBP)
                .addContainerGap(218, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAbnormalBPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbnormalBPActionPerformed
        // TODO add your handling code here:
        int inputCommunity = comboCommunity.getSelectedIndex();

        String community = "";
        int abnormalCounter = 0;
        ArrayList<Person> personList = new ArrayList<>();
        ArrayList<Patient> patientList = new ArrayList<>();

        if (inputCommunity == 0) {
            community = "Roxbury";
        }
        if (inputCommunity == 1) {
            community = "Mission Main";
        }
        if (inputCommunity == 2) {
            community = "Longwood";
        }
        for (Person person : personDirectory.getPersonDirectory()) {
            if (person.getCommunity().equals(community)) {
                personList.add(person);

            }
        }

        for (Patient patient : patientDirectory.getPatientDirectory()) {
            if (checkAbnormalBP(patient)) {
                patientList.add(patient);
            }
            System.out.println(patient);
        }
        ArrayList<Person> abnormalPatientList = new ArrayList<>();
        for(Patient selectPatient: patientList){
            for(Person selectPerson: personList){
                if(selectPatient.getUniqueID().equals(selectPerson.getUnique_id())){
                    abnormalPatientList.add(selectPerson);
                    abnormalCounter++;
                }
                }
        }
        System.out.println(abnormalPatientList);
//        System.out.println(patientList);
//        populateTable(patientList, personList);
        if(abnormalPatientList.isEmpty()){
            JOptionPane.showMessageDialog(this, "No patients with Abnormal Blood Pressure");
        }
        else{
            populateAbnormalTable(abnormalPatientList);
            txtCount.setText(String.valueOf(abnormalCounter));
        }        
        


    }//GEN-LAST:event_btnAbnormalBPActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbnormalBP;
    private javax.swing.JComboBox<String> comboCommunity;
    private javax.swing.JTable compareTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCount;
    private javax.swing.JLabel lblHeading;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JTextField txtCount;
    // End of variables declaration//GEN-END:variables

    private void populateTable(ArrayList<Patient> patientList, ArrayList<Person> personList) {

        DefaultTableModel model = (DefaultTableModel) compareTable.getModel();
        model.setRowCount(0);
//        System.out.println(personList.size());
//        System.out.println(patientList.size());
         
        for (Patient patient: patientList) {
            Object[] row = new Object[5];
            for (Person person: personList) {
                 
                if (patient.getUniqueID().equals(person.getUnique_id())) {

                    row[0] = patient.getUniqueID();
                    row[1] = person.getName();
                    row[2] = person.getAddress();
                    row[3] = person.getAge();
                    row[4] = person.getCommunity();                   
                   
                }
                //model.addRow(row);

            }
            model.addRow(row);
            

        }

    }
    
        private void populateAbnormalTable(ArrayList<Person> personList) {

        DefaultTableModel model = (DefaultTableModel) compareTable.getModel();
        model.setRowCount(0);
//        System.out.println(personList.size());
//        System.out.println(patientList.size());         
   
            Object[] row = new Object[5];
            for (Person person: personList) {                 

                    row[0] = person;
                    row[1] = person.getName();
                    row[2] = person.getAddress();
                    row[3] = person.getAge();
                    row[4] = person.getCommunity();                   
                   
                    model.addRow(row);
                //model.addRow(row);

            }

    }

    public boolean checkAbnormalBP(Patient patient) {
        EncounterHistory enc = patient.getEncounterHistory();
        Encounter encounter = enc.getEncounterList().get(enc.getEncounterList().size() - 1);
        double bp = encounter.getVitalSigns().getBloodPressure();

        String ageGroup = patient.getgroupAge(patient.getAge());
        if (ageGroup.equals("New Born") && (bp > 100 || bp < 70)) {
            return true;
        } else if (ageGroup.equals("Toddler") && (bp > 110 || bp < 80)) {
            return true;
        } else if (ageGroup.equals("PreSchooler") && (bp > 110 || bp < 80)) {
            return true;
        } else if (ageGroup.equals("School Age") && (bp > 120 || bp < 80)) {
            return true;
        } else if (ageGroup.equals("Teenager") && (bp > 120 || bp < 110)) {
            return true;
        } else if (ageGroup.equals("Adult") && (bp > 120 || bp < 70)) {
            return true;
        } else if (ageGroup.equals("Senior Citizen") && (bp > 120 || bp < 65)) {
            return true;
        } else {
            return false;
        }

    }
    
    public boolean checkNormalBP(Patient patient) {
        EncounterHistory enc = patient.getEncounterHistory();
        Encounter encounter = enc.getEncounterList().get(enc.getEncounterList().size() - 1);
        double bp = encounter.getVitalSigns().getBloodPressure();

        String ageGroup = patient.getgroupAge(patient.getAge());
        if (ageGroup.equals("New Born") && (bp < 100 && bp > 70)) {
            return true;
        } else if (ageGroup.equals("Toddler") && (bp < 110 && bp > 80)) {
            return true;
        } else if (ageGroup.equals("PreSchooler") && (bp < 110 && bp > 80)) {
            return true;
        } else if (ageGroup.equals("School Age") && (bp < 120 && bp > 80)) {
            return true;
        } else if (ageGroup.equals("Teenager") && (bp < 120 && bp > 110)) {
            return true;
        } else if (ageGroup.equals("Adult") && (bp < 120 || bp > 70)) {
            return true;
        } else if (ageGroup.equals("Senior Citizen") && (bp < 120 || bp > 65)) {
            return true;
        } else {
            return false;
        }

    }



}
