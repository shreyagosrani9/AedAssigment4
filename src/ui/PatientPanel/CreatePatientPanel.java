/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.PatientPanel;

import java.time.LocalDateTime;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import models.EncounterHistory;
import models.Patient;
import models.PatientDirectory;
import models.Person;
import models.PersonDirectory;
import models.VitalSigns;

/**
 *
 * @author shreya
 */
public class CreatePatientPanel extends javax.swing.JPanel {

    /**
     * Creates new form CreatePatientPanel
     */
    private JPanel WorkAreaPanel;
    PatientDirectory patientDirectory;
    PersonDirectory personDirectory;

    public CreatePatientPanel(JPanel WorkAreaPanel, PatientDirectory patientDirectory, PersonDirectory personDirectory) {
        initComponents();
        this.WorkAreaPanel = WorkAreaPanel;
        this.patientDirectory = patientDirectory;
        this.personDirectory = personDirectory;
        btnCreatePatient.setVisible(false);
        lblBloodPressure.setVisible(false);
        lblHeartRate.setVisible(false);
        lblTemperature.setVisible(false);
        lblWeight.setVisible(false);
        txtBloodPressure.setVisible(false);
        txtHeartRate.setVisible(false);
        txtTemperature.setVisible(false);
        txtWeight.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblHeading = new javax.swing.JLabel();
        lblSearch = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientTable = new javax.swing.JTable();
        btnCreatePatient = new javax.swing.JButton();
        lblBloodPressure = new javax.swing.JLabel();
        txtBloodPressure = new javax.swing.JTextField();
        lblWeight = new javax.swing.JLabel();
        txtWeight = new javax.swing.JTextField();
        lblHeartRate = new javax.swing.JLabel();
        txtHeartRate = new javax.swing.JTextField();
        lblTemperature = new javax.swing.JLabel();
        txtTemperature = new javax.swing.JTextField();

        setBackground(new java.awt.Color(153, 102, 255));

        lblHeading.setBackground(new java.awt.Color(255, 255, 255));
        lblHeading.setFont(new java.awt.Font("SansSerif", 1, 36)); // NOI18N
        lblHeading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHeading.setText("CREATE PATIENT");

        lblSearch.setBackground(new java.awt.Color(255, 255, 255));
        lblSearch.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        lblSearch.setText("Search Person:");

        btnSearch.setBackground(new java.awt.Color(255, 255, 255));
        btnSearch.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        patientTable.setBackground(new java.awt.Color(204, 204, 255));
        patientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Age", "Address", "Community", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(patientTable);
        if (patientTable.getColumnModel().getColumnCount() > 0) {
            patientTable.getColumnModel().getColumn(2).setPreferredWidth(60);
            patientTable.getColumnModel().getColumn(2).setMaxWidth(60);
        }

        btnCreatePatient.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        btnCreatePatient.setText("Create Patient");
        btnCreatePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreatePatientActionPerformed(evt);
            }
        });

        lblBloodPressure.setBackground(new java.awt.Color(255, 255, 255));
        lblBloodPressure.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        lblBloodPressure.setText("Blood Pressure: ");

        lblWeight.setBackground(new java.awt.Color(255, 255, 255));
        lblWeight.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        lblWeight.setText("Weight (lbs):");

        txtWeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtWeightActionPerformed(evt);
            }
        });

        lblHeartRate.setBackground(new java.awt.Color(255, 255, 255));
        lblHeartRate.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        lblHeartRate.setText("Heart Rate:");

        txtHeartRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHeartRateActionPerformed(evt);
            }
        });

        lblTemperature.setBackground(new java.awt.Color(255, 255, 255));
        lblTemperature.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        lblTemperature.setText("Temperature:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblHeading, javax.swing.GroupLayout.DEFAULT_SIZE, 988, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 943, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblSearch)
                                .addGap(37, 37, 37)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42)
                                .addComponent(btnSearch)
                                .addGap(255, 255, 255))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnCreatePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(365, 365, 365)))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblBloodPressure)
                        .addGap(18, 18, 18)
                        .addComponent(txtBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblWeight)
                        .addGap(18, 18, 18)
                        .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTemperature)
                        .addGap(18, 18, 18)
                        .addComponent(txtTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblHeartRate)
                        .addGap(18, 18, 18)
                        .addComponent(txtHeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lblHeading)
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearch))
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBloodPressure)
                    .addComponent(txtBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHeartRate)
                    .addComponent(txtHeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblWeight)
                    .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTemperature)
                    .addComponent(txtTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addComponent(btnCreatePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(138, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:

        String inputUniqueID = txtSearch.getText();
        ArrayList<Person> personList = new ArrayList<>();
        for (Person person : personDirectory.getPersonDirectory()) {
            if (person.getUnique_id().equals(inputUniqueID)) {
                personList.add(person);
                btnCreatePatient.setVisible(true);
                lblBloodPressure.setVisible(true);
                lblHeartRate.setVisible(true);
                lblTemperature.setVisible(true);
                lblWeight.setVisible(true);
                txtBloodPressure.setVisible(true);
                txtHeartRate.setVisible(true);
                txtTemperature.setVisible(true);
                txtWeight.setVisible(true);
            }
        }
        if (personList.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Person record not found for this ID");
        }
        populateTable(personList);

    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnCreatePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreatePatientActionPerformed
        // TODO add your handling code here:
        int selectedIndex = patientTable.getSelectedRow();
//        System.out.println(patientDirectory.getPatientDirectory());

        if (selectedIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a Person Instance");
        } else {

            String inputUniqueID = txtSearch.getText();
            ArrayList<Person> personList = new ArrayList<>();
            for (Person person : personDirectory.getPersonDirectory()) {
                if (person.getUnique_id().equals(inputUniqueID)) {
                    personList.add(person);
                    if (person.isStatus()) {
                        JOptionPane.showMessageDialog(this, "Patient already registered");
                    } else {

                        Double bloodPressure = 120.0;
                        Double heartRate = 60.0;
                        Double temperature = 37.0;
                        Double weight = 60.0;

                        try {
                            bloodPressure = Double.parseDouble(txtBloodPressure.getText());
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(this, e);
                            bloodPressure = 0.0;
                        }

                        try {
                            heartRate = Double.parseDouble(txtHeartRate.getText());
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(this, e);
                            heartRate = 0.0;
                        }

                        try {
                            temperature = Double.parseDouble(txtTemperature.getText());
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(this, e);
                            temperature = 0.0;
                        }

                        try {
                            weight = Double.parseDouble(txtWeight.getText());
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(this, e);
                            weight = 0.0;
                        }
                        if (bloodPressure.equals(0.0) || heartRate.equals(0.0) || temperature.equals(0.0) || weight.equals(0.0)) {
                            JOptionPane.showMessageDialog(this, "Vital Signs missing");
                        } else {
                            person.setStatus(true);

                            Patient patient = patientDirectory.addPatient();
                            patient.setUniqueID(inputUniqueID);
                            patient.setName(person.getName());
                            patient.setAge(person.getAge());
                            patient.setCreatedOn(LocalDateTime.now());
                            patient.setStatus(true);
//                            System.out.println("Created");

                            EncounterHistory encounterHistory = new EncounterHistory();
                            patient.setEncounterHistory(encounterHistory);

                            // Adding VitalSigns
                            VitalSigns vitalSigns = new VitalSigns();
                            patient.getEncounterHistory().addNewEncounter().setVitalSigns(vitalSigns);
                            vitalSigns.setBloodPressure(bloodPressure);
                            vitalSigns.setHeartRate(heartRate);
                            vitalSigns.setBodyTemperature(temperature);
                            vitalSigns.setWeight(weight);
                            vitalSigns.setCreatedOn(LocalDateTime.now());
//                            System.out.println(patient.getEncounterHistory().getEncounterList().get(patient.getEncounterHistory().getEncounterList().size()-1).getVitalSigns().getBloodPressure());
                            JOptionPane.showMessageDialog(this, "Patient Created Successfully");
                        }

                    }

                }
            }
            if (personList.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Person record not found for this ID");
            }
            populateTable(personList);

        }


    }//GEN-LAST:event_btnCreatePatientActionPerformed

    private void txtHeartRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHeartRateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHeartRateActionPerformed

    private void txtWeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtWeightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtWeightActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreatePatient;
    private javax.swing.JButton btnSearch;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBloodPressure;
    private javax.swing.JLabel lblHeading;
    private javax.swing.JLabel lblHeartRate;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblTemperature;
    private javax.swing.JLabel lblWeight;
    private javax.swing.JTable patientTable;
    private javax.swing.JTextField txtBloodPressure;
    private javax.swing.JTextField txtHeartRate;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtTemperature;
    private javax.swing.JTextField txtWeight;
    // End of variables declaration//GEN-END:variables

    private void populateTable(ArrayList<Person> personList) {
        DefaultTableModel model = (DefaultTableModel) patientTable.getModel();
        model.setRowCount(0);

        for (Person persons : personList) {
            Object[] row = new Object[model.getColumnCount()];
            row[0] = persons.getUnique_id();
            row[1] = persons.getName();
            row[2] = persons.getAge();
            row[3] = persons.getAddress();
            row[4] = persons.getCommunity();

            if (persons.isStatus() == true) {
                row[5] = "Registered";
            } else {
                row[5] = "Not Registered";
            }

            model.addRow(row);
        }
    }
}
