/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.PatientPanel;

import java.time.LocalDateTime;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import models.Encounter;
import models.EncounterHistory;
import models.Patient;
import models.PatientDirectory;
import models.Person;
import models.PersonDirectory;
import models.VitalSigns;

/**
 *
 * @author shreya
 */
public class ManagePatientPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManagePatientPanel
     */
    private JPanel WorkAreaPanel;
    PatientDirectory patientDirectory;
    PersonDirectory personDirectory;

    public ManagePatientPanel(JPanel WorkAreaPanel, PatientDirectory patientDirectory, PersonDirectory personDirectory) {
        initComponents();
        this.WorkAreaPanel = WorkAreaPanel;
        this.patientDirectory = patientDirectory;
        this.personDirectory = personDirectory;

        lblBloodPressure.setVisible(false);
        lblHeartRate.setVisible(false);
        lblTemperature.setVisible(false);
        lblWeight.setVisible(false);

        txtBloodPressure.setVisible(false);
        txtHeartRate.setVisible(false);
        txtTemperature.setVisible(false);
        txtWeight.setVisible(false);
        btnAddEncounter.setVisible(false);
        btnAddVitalSign.setVisible(false);
        btnViewEncounter.setVisible(false);
        btnUpdateEncounter.setVisible(false);
        btnDeleteEncounter.setVisible(false);
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblManagePerson = new javax.swing.JLabel();
        lblSearch = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientTable = new javax.swing.JTable();
        btnAddEncounter = new javax.swing.JButton();
        lblBloodPressure = new javax.swing.JLabel();
        txtBloodPressure = new javax.swing.JTextField();
        lblWeight = new javax.swing.JLabel();
        txtWeight = new javax.swing.JTextField();
        lblHeartRate = new javax.swing.JLabel();
        txtHeartRate = new javax.swing.JTextField();
        lblTemperature = new javax.swing.JLabel();
        txtTemperature = new javax.swing.JTextField();
        btnAddVitalSign = new javax.swing.JButton();
        btnViewEncounter = new javax.swing.JButton();
        btnDeleteEncounter = new javax.swing.JButton();
        btnUpdateEncounter = new javax.swing.JButton();

        setBackground(new java.awt.Color(153, 102, 255));

        lblManagePerson.setBackground(new java.awt.Color(204, 204, 204));
        lblManagePerson.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        lblManagePerson.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblManagePerson.setText("MANAGE PATIENT");

        lblSearch.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        lblSearch.setText("Search Patient:");

        btnSearch.setBackground(new java.awt.Color(255, 255, 255));
        btnSearch.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        patientTable.setBackground(new java.awt.Color(204, 204, 255));
        patientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Blood Pressure", "Temperature", "Weight", "Heart Rate", "Created"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(patientTable);

        btnAddEncounter.setBackground(new java.awt.Color(255, 255, 255));
        btnAddEncounter.setText("Add Encounter");
        btnAddEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEncounterActionPerformed(evt);
            }
        });

        lblBloodPressure.setBackground(new java.awt.Color(255, 255, 255));
        lblBloodPressure.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        lblBloodPressure.setText("Blood Pressure: ");

        lblWeight.setBackground(new java.awt.Color(255, 255, 255));
        lblWeight.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        lblWeight.setText("Weight (lbs):");

        lblHeartRate.setBackground(new java.awt.Color(255, 255, 255));
        lblHeartRate.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        lblHeartRate.setText("Heart Rate:");

        txtHeartRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHeartRateActionPerformed(evt);
            }
        });

        lblTemperature.setBackground(new java.awt.Color(255, 255, 255));
        lblTemperature.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        lblTemperature.setText("Temperature:");

        btnAddVitalSign.setBackground(new java.awt.Color(255, 255, 255));
        btnAddVitalSign.setText("Add");
        btnAddVitalSign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddVitalSignActionPerformed(evt);
            }
        });

        btnViewEncounter.setBackground(new java.awt.Color(255, 255, 255));
        btnViewEncounter.setText("View Encounter");
        btnViewEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewEncounterActionPerformed(evt);
            }
        });

        btnDeleteEncounter.setBackground(new java.awt.Color(255, 255, 255));
        btnDeleteEncounter.setText("Delete Patient");
        btnDeleteEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteEncounterActionPerformed(evt);
            }
        });

        btnUpdateEncounter.setBackground(new java.awt.Color(255, 255, 255));
        btnUpdateEncounter.setText("Update");
        btnUpdateEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateEncounterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblManagePerson, javax.swing.GroupLayout.DEFAULT_SIZE, 988, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(101, 101, 101)
                                        .addComponent(btnViewEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(236, 236, 236)
                                        .addComponent(lblSearch)
                                        .addGap(29, 29, 29)
                                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(29, 29, 29)
                                        .addComponent(btnSearch)))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(149, 149, 149)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblBloodPressure)
                                .addGap(18, 18, 18)
                                .addComponent(txtBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblWeight)
                                .addGap(18, 18, 18)
                                .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblTemperature)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(lblHeartRate)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtHeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(btnUpdateEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAddEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(88, 88, 88)
                        .addComponent(btnDeleteEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(161, 161, 161))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAddVitalSign, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(539, 539, 539))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(lblManagePerson)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(lblSearch))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnViewEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(88, 88, 88)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBloodPressure)
                    .addComponent(txtBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHeartRate)
                    .addComponent(txtHeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblWeight)
                    .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTemperature)
                    .addComponent(txtTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddVitalSign, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdateEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(155, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String inputUniqueID = txtSearch.getText();
        ArrayList<Patient> patientList = new ArrayList<>();

        for (Patient patient : patientDirectory.getPatientDirectory()) {
            if (patient.getUniqueID().equalsIgnoreCase(inputUniqueID) && patient.isStatus() == true) {
                patientList.add(patient);
                btnAddEncounter.setVisible(true);
                btnViewEncounter.setVisible(true);
                btnDeleteEncounter.setVisible(true);
                populateTable(patient);
            }
        }
        if (patientList.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Patient record not found");
        }

//        System.out.println(patientList);
        
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnAddEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEncounterActionPerformed
        // TODO add your handling code here:
        
        txtBloodPressure.setText("");
        txtHeartRate.setText("");
        txtTemperature.setText("");
        txtWeight.setText("");
        lblBloodPressure.setVisible(true);
        lblHeartRate.setVisible(true);
        lblTemperature.setVisible(true);
        lblWeight.setVisible(true);

        btnAddVitalSign.setVisible(true);
        btnUpdateEncounter.setVisible(false);
        txtBloodPressure.setVisible(true);
        txtHeartRate.setVisible(true);
        txtTemperature.setVisible(true);
        txtWeight.setVisible(true);

    }//GEN-LAST:event_btnAddEncounterActionPerformed

    private void txtHeartRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHeartRateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHeartRateActionPerformed

    private void btnViewEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewEncounterActionPerformed
        // TODO add your handling code here:
        btnUpdateEncounter.setVisible(false);
        btnDeleteEncounter.setVisible(true);
        btnAddVitalSign.setVisible(false);
        
        lblBloodPressure.setVisible(true);
        lblHeartRate.setVisible(true);
        lblTemperature.setVisible(true);
        lblWeight.setVisible(true);

        txtBloodPressure.setVisible(true);
        txtHeartRate.setVisible(true);
        txtTemperature.setVisible(true);
        txtWeight.setVisible(true);
        
        
        int selectedIndex = patientTable.getSelectedRow();
        
        if(selectedIndex<0){
            JOptionPane.showMessageDialog(this, "Please select a Row");
        }
        else{
            DefaultTableModel model = (DefaultTableModel) patientTable.getModel();
            Patient selectedRow = (Patient) model.getValueAt(selectedIndex, 0);
            
            int encounter = selectedRow.getEncounterHistory().getEncounterList().size() -1;
            
            
            txtBloodPressure.setText(String.valueOf(selectedRow.getEncounterHistory().getEncounterList().get(encounter).getVitalSigns().getBloodPressure()));
            txtHeartRate.setText(String.valueOf(selectedRow.getEncounterHistory().getEncounterList().get(encounter).getVitalSigns().getHeartRate()));
            txtTemperature.setText(String.valueOf(selectedRow.getEncounterHistory().getEncounterList().get(encounter).getVitalSigns().getBodyTemperature()));
            txtWeight.setText(String.valueOf(selectedRow.getEncounterHistory().getEncounterList().get(encounter).getVitalSigns().getWeight()));
           
        }
        
    }//GEN-LAST:event_btnViewEncounterActionPerformed

    private void btnDeleteEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteEncounterActionPerformed
        // TODO add your handling code here:
         int selectedIndex = patientTable.getSelectedRow();
        
        if(selectedIndex<0){
            JOptionPane.showMessageDialog(this, "Please select a Row");
        }
        else{
            DefaultTableModel model = (DefaultTableModel) patientTable.getModel();
            Patient selectedPatient = (Patient) model.getValueAt(selectedIndex, 0);
            
            for(Person person :personDirectory.getPersonDirectory()){
                if(person.getUnique_id().equals(selectedPatient.getUniqueID())){
                    person.setStatus(false);
                }
            }
            selectedPatient.setStatus(false);
            
            patientDirectory.deletePatient(selectedPatient);
            populateEmptyTable();
            JOptionPane.showMessageDialog(this, "Patient Encounter deleted");
            
            
            
        }
    }//GEN-LAST:event_btnDeleteEncounterActionPerformed

    private void btnAddVitalSignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddVitalSignActionPerformed
        // TODO add your handling code here:
        Double bloodPressure = 120.0;
        Double heartRate = 60.0;
        Double temperature = 37.0;
        Double weight = 60.0;
        
        btnUpdateEncounter.setVisible(false);

        try {
            bloodPressure = Double.parseDouble(txtBloodPressure.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }

        try {
            heartRate = Double.parseDouble(txtHeartRate.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }

        try {
            temperature = Double.parseDouble(txtTemperature.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }

        try {
            weight = Double.parseDouble(txtWeight.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }

        ArrayList<Patient> patientList = new ArrayList<>();

        for (Patient patient : patientDirectory.getPatientDirectory()) {
            if (patient.getUniqueID().equalsIgnoreCase(txtSearch.getText()) && patient.isStatus() == true) {
                patientList.add(patient);

                VitalSigns vitalSigns = new VitalSigns();
                vitalSigns.setBloodPressure(bloodPressure);
                vitalSigns.setHeartRate(heartRate);
                vitalSigns.setBodyTemperature(temperature);
                vitalSigns.setWeight(weight);
                vitalSigns.setCreatedOn(LocalDateTime.now());
                patient.getEncounterHistory().addNewEncounter().setVitalSigns(vitalSigns);
                System.out.println(patient.getEncounterHistory());

                populateTable(patient);
                txtBloodPressure.setText("");
                txtHeartRate.setText("");
                txtTemperature.setText("");
                txtWeight.setText("");
            }
        }
    }//GEN-LAST:event_btnAddVitalSignActionPerformed

    private void btnUpdateEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateEncounterActionPerformed
        // TODO add your handling code here:
        Double bloodPressure = 120.0;
        Double heartRate = 60.0;
        Double temperature = 37.0;
        Double weight = 60.0;
        
        try {
            bloodPressure = Double.parseDouble(txtBloodPressure.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }

        try {
            heartRate = Double.parseDouble(txtHeartRate.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }

        try {
            temperature = Double.parseDouble(txtTemperature.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }

        try {
            weight = Double.parseDouble(txtWeight.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }

        ArrayList<Encounter> encounterList = new ArrayList<>();
        for(Patient patient: patientDirectory.getPatientDirectory()){
            if (patient.getUniqueID().equalsIgnoreCase(txtSearch.getText()) && patient.isStatus() == true) {
                encounterList = patient.getEncounterHistory().getEncounterList();

                VitalSigns vitalSigns = new VitalSigns();
                vitalSigns.setBloodPressure(bloodPressure);
                vitalSigns.setHeartRate(heartRate);
                vitalSigns.setBodyTemperature(temperature);
                vitalSigns.setWeight(weight);
                vitalSigns.setCreatedOn(LocalDateTime.now());
                patient.getEncounterHistory().addNewEncounter().setVitalSigns(vitalSigns);
                System.out.println(patient.getEncounterHistory());

                populateTable(patient);
                txtBloodPressure.setText("");
                txtHeartRate.setText("");
                txtTemperature.setText("");
                txtWeight.setText("");
            }
        }
        
    }//GEN-LAST:event_btnUpdateEncounterActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddEncounter;
    private javax.swing.JButton btnAddVitalSign;
    private javax.swing.JButton btnDeleteEncounter;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdateEncounter;
    private javax.swing.JButton btnViewEncounter;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBloodPressure;
    private javax.swing.JLabel lblHeartRate;
    private javax.swing.JLabel lblManagePerson;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblTemperature;
    private javax.swing.JLabel lblWeight;
    private javax.swing.JTable patientTable;
    private javax.swing.JTextField txtBloodPressure;
    private javax.swing.JTextField txtHeartRate;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtTemperature;
    private javax.swing.JTextField txtWeight;
    // End of variables declaration//GEN-END:variables

    private void populateTable(Patient patient) {

        DefaultTableModel model = (DefaultTableModel) patientTable.getModel();
        model.setRowCount(0);        
        
            ArrayList<Encounter> encounter = patient.getEncounterHistory().getEncounterList();
            System.out.println(patient.getEncounterHistory().getEncounterList());
            for(Encounter enc: encounter){
                VitalSigns vitalSign = enc.getVitalSigns();
                Object[] row = new Object[6];
                
                if(encounter.isEmpty()){
                    JOptionPane.showMessageDialog(this, "No Encounter record found");
                }
                else{
                    row [0] = patient;
                    row[1] = vitalSign.getBloodPressure();
                    row[2] = vitalSign.getBodyTemperature();
                    row[3] = vitalSign.getWeight();
                    row[4] = vitalSign.getHeartRate();
                    row[5] = vitalSign.getCreatedOn();
                    
                    model.addRow(row);
                }
                
            }
        
        
        

    }
    
    private void populateEmptyTable(){
        DefaultTableModel model = (DefaultTableModel) patientTable.getModel();
        model.setRowCount(0);
        
        Object[] row = new Object[6];
        row[0] = "";
        row[1] = "";
        row[2] = "";
        row[3] = "";
        row[4] = "";
        row[5] = "";
        row[6] = "";
        
        model.addRow(row);
    }

}
